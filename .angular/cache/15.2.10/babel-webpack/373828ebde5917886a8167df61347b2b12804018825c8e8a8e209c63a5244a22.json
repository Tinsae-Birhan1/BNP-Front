{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/auth.service\";\nexport class TokenInterceptor {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    const token = this.authService.currentUserValue;\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer  ${token.token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";;;AAYA,OAAM,MAAOA,gBAAgB;EAC3BC,YACmBC,MAAc,EAEdC,WAAkC;IAFlC,WAAM,GAAND,MAAM;IAEN,gBAAW,GAAXC,WAAW;EAC3B;EAEHC,SAAS,CACPC,OAAyB,EACzBC,IAAiB;IAEjB,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,gBAAgB;IAE/C,IAAID,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,WAAWJ,KAAK,CAACA,KAAK;;OAExC,CAAC;;IAGJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;EAAC;qBAtBUL,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAa,SAAhBb,gBAAgB;EAAA","names":["TokenInterceptor","constructor","router","authService","intercept","request","next","token","currentUserValue","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["/home/mesi/Tinsae/Angular/angular front/src/app/interceptor/token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private readonly router: Router,\r\n\r\n    private readonly authService: AuthenticationService\r\n  ) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const token = this.authService.currentUserValue;\r\n\r\n    if (token) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer  ${token.token}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}